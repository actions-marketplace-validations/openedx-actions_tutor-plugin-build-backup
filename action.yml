#------------------------------------------------------------------------------
#
#
# see
#  - https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
#  - https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#
#------------------------------------------------------------------------------
name: '"Build Tutor Backup Plugin" Action For GitHub Actions'
description: 'Use Tutor to build a Docker container for the hastexo Backup & Restore plugin, then upload to AWS ECR'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  subdomain:
    description: 'www'
    required: true
  domain-name:
    description: 'example.com'
    required: true
  site-name:
    description: 'University of the Galaxy'
    required: true
  aws-ecr-repository:
    description: 'The name of the repository inside your AWS Elastic Container Registry (ECR) in which the newly created container will be uploaded and tagged. Defaults to "openedx_backup"'
    required: false
    default: 'openedx_backup'
outputs:
  docker-container-url:
    description: 'The URL of the AWS ECR Docker container that was created and uploaded'
    value: ${{ steps.docker-image.outputs.uri }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.4.0

    # verify that the ECR repository exists. If not, then create it.
    - name: Create the AWS ECR repository
      id: create-repository
      uses: lpm0073/aws-ecr-create@v0.0.2
      with:
        aws-ecr-repository: ${{ inputs.aws-ecr-repository }}

    - name: Install Tutor
      id: install-tutor
      run: ./scripts/install-tutor.sh
      shell: bash

    - name: Intialize environment variables
      id: init-env
      run: |
        echo "AWS_ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> ${{ github.env }}
        echo "AWS_ECR_REPOSITORY=${{ inputs.aws-ecr-repository }}" >> ${{ github.env }}
        echo "REPOSITORY_TAG=$TUTOR_VERSION-$(date +%Y%m%d%H%M)" >> ${{ github.env }}

        echo "PLUGIN_RELEASE=${{ inputs.hastexo-backup-release }}" >> $GITHUB_ENV
      shell: bash

    - name: Initialize Docker image URI
      id: init-docker-image
      run: |
        echo "DOCKER_IMAGE=${AWS_ECR_REGISTRY}/${AWS_ECR_REPOSITORY}:${REPOSITORY_TAG}" >> ${{ github.env }}
      shell: bash

    # Note: This is scaffolding. This step initialize the tutor 'env' path, which you might need
    #       if for example, you need to add Python requirements to the image
    - name: Render Tutor Config
      id: tutor-config-save
      run: tutor config save --set BACKUP_DOCKER_IMAGE=${DOCKER_IMAGE}
      shell: bash

    # Note: This is scaffolding. Add environment initialization stuff to this step
    #       that requires that a.) tutor is installed, and b.) the tutor environment
    #       is initialized.
    #
    #       Example: to add requirements to a build: $(tutor config printroot)/env/build/backup/requirements
    - name: Set Tutor-dependent environment variables
      id: tutor-environment-variables
      run: |
        echo "scaffolding for Tutor-dependent environment variables"
      shell: bash

    - name: Install plugin
      id: pip-install-plugin
      run: ./scripts/install-plugin.sh
      shell: bash

    - name: Build the image
      id: tutor-build-image
      run: tutor images build backup
      shell: bash

    - name: Push the image
      id: docker-push-image
      run: ./scripts/upload-to-aws-ecr.sh
      shell: bash

    - name: Docker image:tag
      id: docker-image
      run: |
        echo "::set-output name=uri::$(echo $DOCKER_IMAGE)"
      shell: bash
